{"version":3,"sources":["components/newEvents.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["NewEvent","props","onchange","e","setState","target","name","value","handleDateChange","date","eventDate","handleCheckbox","requirement","convertDate","val","getDate","getMonth","getFullYear","onsubmit","preventDefault","convertedDate","state","data","console","log","axios","post","then","response","message","show","catch","error","Date","time","venue","audience","topic","materialsRequired","email","Card","CardBody","Alert","this","variant","Heading","Form","FormGroup","Row","Box","pl","pt","pr","selected","onChange","dateFormat","Input","type","placeholder","mx","p","Button","size","color","onClick","React","Component","Appbar","Navbar","dark","expand","NavbarBrand","App","className","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b812981.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { Form, FormGroup, Input, Label } from \"reactstrap\";\nimport { Card, CardBody } from \"reactstrap\";\nimport { Button } from \"reactstrap\";\nimport Box from \"@material-ui/core/Box\";\nimport DatePicker from \"react-datepicker\";\nimport Row from \"react-bootstrap/Row\";\nimport Alert from \"react-bootstrap/Alert\";\n\nclass NewEvent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      date: \"\",\n      eventDate: new Date(),\n      time: \"\",\n      venue: \"\",\n      audience: \"\",\n      topic: \"\",\n      requirement: false,\n      materialsRequired: \"\",\n      email: \"\",\n      message: \"\",\n      show: false,\n    };\n  }\n\n  onchange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleDateChange = (date) => {\n    this.setState({\n      eventDate: date,\n    });\n  };\n\n  handleCheckbox = (e) => {\n    this.setState({\n      requirement: !this.requirement,\n    });\n  };\n\n  convertDate = (val) => {\n    var dd = val.getDate();\n    var mm = val.getMonth() + 1;\n    var yy = val.getFullYear();\n    //console.log(dd + \"/\" + mm + \"/\" + yy);\n    return dd + \"/\" + mm + \"/\" + yy;\n  };\n\n  onsubmit = (e) => {\n    e.preventDefault();\n\n    const convertedDate = this.convertDate(this.state.eventDate);\n\n    //console.log(this.state);\n    var data = this.state;\n    //console.log(data);\n    data.date = convertedDate;\n    delete data[\"eventDate\"];\n    delete data[\"message\"];\n    //var dataJson = JSON.stringify(data);\n    console.log(data);\n\n    axios\n      .post(\n        \"https://application-generator.el.r.appspot.com/application_generator\",\n        data\n      )\n      .then((response) => {\n        console.log(response);\n        this.setState({\n          message: \"Application generated\",\n          show: true,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        this.setState({\n          message: \"Error\",\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <Card>\n          <CardBody>\n            <Alert show={this.state.show} variant=\"success\">\n              <Alert.Heading>{this.state.message}</Alert.Heading>\n            </Alert>\n            <Form>\n              <FormGroup>\n                <Row>\n                  <Box pl={2} pt={1} pr={4}>\n                    <h6>\n                      <b>Event Date</b>\n                    </h6>\n                  </Box>\n\n                  <DatePicker\n                    selected={this.state.eventDate}\n                    onChange={(eventDate) => this.handleDateChange(eventDate)}\n                    dateFormat=\"MMMM d, yyyy\"\n                  />\n                </Row>\n\n                <br></br>\n\n                <Input\n                  type=\"text\"\n                  name=\"time\"\n                  placeholder=\"Enter Time\"\n                  value={this.state.time}\n                  onChange={this.onchange}\n                />\n                <br></br>\n\n                <Input\n                  type=\"text\"\n                  name=\"venue\"\n                  placeholder=\"Enter Venue\"\n                  value={this.state.venue}\n                  onChange={this.onchange}\n                />\n                <br></br>\n                <Input\n                  type=\"text\"\n                  name=\"audience\"\n                  placeholder=\"Enter Audience\"\n                  value={this.state.audience}\n                  onChange={this.onchange}\n                />\n                <br></br>\n                <Input\n                  type=\"text\"\n                  name=\"topic\"\n                  placeholder=\"Enter Topic\"\n                  value={this.state.topic}\n                  onChange={this.onchange}\n                />\n                <br></br>\n                {/* <Label check>\n                  <Input type=\"checkbox\" onChange={this.handleCheckbox} /> Extra\n                  Requirements\n                </Label>\n                <br></br>\n                <br></br>\n                <Input\n                  type=\"text\"\n                  name=\"materialsRequired\"\n                  placeholder=\"Enter Requirements\"\n                  value={this.state.materialsRequired}\n                  onChange={this.onchange}\n                />\n                <br></br> */}\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Enter Email ID\"\n                  value={this.state.email}\n                  onChange={this.onchange}\n                />\n                <br></br>\n              </FormGroup>\n            </Form>\n          </CardBody>\n        </Card>\n        <br></br>\n\n        <Box mx=\"auto\" p={1}>\n          <Button size=\"lg\" color=\"secondary\" onClick={this.onsubmit}>\n            Generate Application\n          </Button>\n        </Box>\n      </div>\n    );\n  }\n}\n\nexport default NewEvent;\n","import React from \"react\";\nimport { Navbar, NavbarBrand } from \"reactstrap\";\n\nconst Appbar = () => {\n  return (\n    <div>\n      <Navbar color=\"dark\" dark expand=\"sm\">\n        <NavbarBrand>Letter Generator</NavbarBrand>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Appbar;\n","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport \"./App.css\";\nimport NewEvent from \"./components/newEvents.js\";\nimport Appbar from \"./components/Navbar.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"md\">\n        <Box mx=\"auto\" p={5}>\n          <Appbar />\n          <NewEvent />\n        </Box>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}